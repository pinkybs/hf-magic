<?php defined('SYSPATH') OR die('No direct access allowed.');
/**
 * Default Kohana controller. This controller should NOT be used in production.
 * It is for demonstration purposes only!
 *
 * @package    Core
 * @author     Kohana Team
 * @copyright  (c) 2007-2008 Kohana Team
 * @license    http://kohanaphp.com/license.html
 */
class Welcome_Controller extends Template_Controller {

	// Disable this controller when Kohana is set to production mode.
	// See http://docs.kohanaphp.com/installation/deployment for more details.
	const ALLOW_PRODUCTION = FALSE;

	// Set the name of the template to use
	public $template = 'kohana/template';

	public function index()
	{
		// In Kohana, all views are loaded and treated as objects.
		$this->template->content = new View('welcome_content');

		// You can assign anything variable to a view by using standard OOP
		// methods. In my welcome view, the $title variable will be assigned
		// the value I give it here.
		$this->template->title = 'Welcome to Kohana!';

		// An array of links to display. Assiging variables to views is completely
		// asyncronous. Variables can be set in any order, and can be any type
		// of data, including objects.
		$this->template->content->links = array
		(
			'Home Page'     => 'http://kohanaphp.com/',
			'Documentation' => 'http://docs.kohanaphp.com/',
			'Forum'         => 'http://forum.kohanaphp.com/',
			'License'       => 'Kohana License.html',
			'Donate'        => 'http://kohanaphp.com/donate.html',
		);
		
		$this->session = Session::instance();
		$session_conf = Kohana::config('session');
		$session_key = $session_conf['session_key'];
		
		$this->session->set('session_key', $session_key);
		
		echo $this->session->get('session_key');
		
		//$this->cache= new Cache();
 
		//$table = $this->cache->set('wuha',array(1,1,1));
		//$table = $this->cache->get('wuha');
		//print_r($table);
//		var_dump(media::img_url());
//		$dialogue = Kohana::config_load('xiaoming.event1');
//		var_dump($dialogue);
		$prop = new Profiler;
		//GameEvent::eventLoad('xiaoming.event2');
	}
	
	function database()
	{
		$db = new Database;

		$table = 'test';
		echo 'Does the '.$table.' table exist? ';
		if ($db->table_exists($table))
		{
			echo '<p>YES! Lets do some work =)</p>';

			$query = $db->select('*')->from($table)->get();
			echo $db->last_query();
			echo '<h3>Iterate through the result:</h3>';
			var_dump($query);
			foreach ($query as $item)
			{
				echo '<p>'.$item->title.'</p>';
			}
			echo '<h3>Numrows using count(): '.count($query).'</h3>';
			echo 'Table Listing:<pre>'.print_r($db->list_tables(), TRUE).'</pre>';

			echo '<h3>Try Query Binding with objects:</h3>';
			$sql = 'SELECT * FROM '.$table.' WHERE id = ?';
			$query = $db->query($sql, array(1));
			echo '<p>'.$db->last_query().'</p>';
			$query->result(TRUE);
			foreach ($query as $item)
			{
				echo '<pre>'.print_r($item, true).'</pre>';
			}

			echo '<h3>Try Query Binding with arrays (returns both associative and numeric because I pass MYSQL_BOTH to result():</h3>';
			$sql = 'SELECT * FROM '.$table.' WHERE id = ?';
			$query = $db->query($sql, array(1));
			echo '<p>'.$db->last_query().'</p>';
			$query->result(FALSE, MYSQL_BOTH);
			foreach ($query as $item)
			{
				echo '<pre>'.print_r($item, true).'</pre>';
			}

			echo '<h3>Look, we can also manually advance the result pointer!</h3>';
			$query = $db->select('title')->from($table)->get();
			echo 'First:<pre>'.print_r($query->current(), true).'</pre><br />';
			$query->next();
			echo 'Second:<pre>'.print_r($query->current(), true).'</pre><br />';
			$query->next();
			echo 'Third:<pre>'.print_r($query->current(), true).'</pre>';
			echo '<h3>And we can reset it to the beginning:</h3>';
			$query->rewind();
			echo 'Rewound:<pre>'.print_r($query->current(), true).'</pre>';

			echo '<p>Number of rows using count_records(): '.$db->count_records('pages').'</p>';
		}
		else
		{
			echo 'NO! The '.$table.' table doesn\'t exist, so we can\'t continue =( ';
		}
		echo "<br/><br/>\n";
		echo 'done in {execution_time} seconds';
	}

//	public function __call($method, $arguments)
//	{
//		// Disable auto-rendering
//		//$this->auto_render = FALSE;
//
//		// By defining a __call method, all pages routed to this controller
//		// that result in 404 errors will be handled by this method, instead of
//		// being displayed as "Page Not Found" errors.
//		echo 'This text is generated by __call. If you expected the index page, you need to use: welcome/index/'.substr(Router::$current_uri, 8);
//	}

} // End Welcome Controller